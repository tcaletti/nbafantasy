getwd()
load("cluster_algorithm")
library(nbastatR)
library(dplyr)
library(glue)
last_ten_games = function(games, team, game) {
teamGames = games %>%
filter(slugTeam == team, numberGameTeamSeason >= game-10, numberGameTeamSeason < game)
teamStats = teamGames %>%
summarise(reb = sum(trebTeam),
pts = sum(ptsTeam),
oreb = sum(orebTeam),
fga = sum(fgaTeam),
fgm = sum(fgmTeam),
fg3a = sum(fg3aTeam),
fg3m = sum(fg3mTeam),
tov = sum(tovTeam),
fta = sum(ftaTeam),
n = n()) %>%
mutate(possessions = fga+tov-oreb+.475*fta)
opponentStats = games %>%
filter(slugOpponent == team, idGame %in% teamGames$idGame) %>%
summarise(oppReb = sum(trebTeam),
oppPts = sum(ptsTeam),
oppOReb = sum(orebTeam),
oppFGA = sum(fgaTeam),
oppFGM = sum(fgmTeam),
opp3A = sum(fg3aTeam),
opp3M = sum(fg3mTeam),
oppTov = sum(tovTeam),
oppFta = sum(ftaTeam),
oppAst = sum(astTeam),
firstGame = min(dateGame),
lastGame = max(dateGame),
oppN = n()) %>%
mutate(oPossessions = oppFGA+oppTov-oppOReb+.475*oppFta)
results = teamStats %>%
cbind(opponentStats) %>%
mutate(team = team,
gameNum = game,
pace = (possessions+oPossessions)/(n+oppN),
oEff = pts*100/possessions,
dEff = oppPts*100/possessions,
net = oEff - dEff,
efg = (fgm + .5*fg3m)/fga,
rebs = reb/(reb+oppReb),
drebs = (reb-oreb)/(reb-oreb+oppOReb),
orebs = oreb/(oreb+oppReb-oppOReb),
oppFtr = oppFta/oppFGA,
oppEFG = (oppFGM + .5*opp3M)/oppFGA,
opp3r = opp3A/oppFGA,
tov = tov/possessions,
oppAsts = oppAst/oppFGM,
oppTov = oppTov/oPossessions) %>%
select(team, gameNum, firstGame, lastGame, pace, oEff, dEff, net, efg, rebs, drebs, orebs, tov, oppFtr, oppEFG, opp3r, oppAsts, oppTov)
return(results)
}
team2018 = game_logs(seasons=2018, result_types = 'team') %>%
select(dateGame, idGame, numberGameTeamSeason, slugTeam, slugOpponent, isB2B, locationGame, countDaysRestTeam, outcomeGame) %>%
rename(teamGameNum = numberGameTeamSeason, team = slugTeam, opponent = slugOpponent, b2b = isB2B, location = locationGame, outcome = outcomeGame) %>%
mutate(daysRest = ifelse(countDaysRestTeam > 4, 4, countDaysRestTeam)) %>%
select(-countDaysRestTeam)
eligibleTeams = team2018 %>%
filter(teamGameNum > 5)
oppL10 = data.frame()
games2018 = game_logs(seasons=2018, result_types='team')
for(i in 1:nrow(eligibleTeams)){
df = last_ten_games(games2018, eligibleTeams$opponent[i], eligibleTeams$teamGameNum[i]) %>%
rename(opp = team)
oppL10 = oppL10 %>%
rbind(df)
}
load('cluster_algorithm', verbose=T)
getwd()
setwd("/Users/tcaletti/Documents/NBA/nbafantasy")
load('cluster_algorithm', verbose=T)
devtools::use_data(clusterAlg,internal=T)
clusterAlg = nbafantasy:::clusterAlg
devtools::install_github('tcaletti/nbafantasy')
library(nbafantasy)
player_past_games('Stephen Curry')
devtools::install_github('tcaletti/nbafantasy')
library(nbafantasy)
player_past_games('Stephen Curry')
similar_games('Giannis Antetokounmpo', 'CHA')
player_past_games('Giannis Antetokounmpo')
similar_games('Giannis Antetokounmpo', 'CHA')
similar_games('James Harden', 'WAS')
devtools::install_github('tcaletti/nbafantasy')
library(nbafantasy)
ls('package:nbafantasy')
.rs.restartR()
library(nbafantasy)
player_past_games("Giannis Antetokounmpo")
player_past_games("Kevin Durant")
similar_games("Kevin Durant", 'ORL')
cluster_defitions()
cluster_definitions()
