getwd()
library(devtools)
document()
devtools::install_github('tcaletti/nbafantasy')
devtools::install_github('tcaletti/nbafantasy')
library(nbafantasy)
warnings()
library(nbafantasy)
ls('package:nbafantasy')
cluster_definitions()
player_past_games('Giannis Antetokounmpo')
library(nbastatR)
library(dplyr)
library(glue)
last_ten_games = function(games, team, game) {
teamGames = games %>%
filter(slugTeam == team, numberGameTeamSeason >= game-10, numberGameTeamSeason < game)
teamStats = teamGames %>%
summarise(reb = sum(trebTeam),
pts = sum(ptsTeam),
oreb = sum(orebTeam),
fga = sum(fgaTeam),
fgm = sum(fgmTeam),
fg3a = sum(fg3aTeam),
fg3m = sum(fg3mTeam),
tov = sum(tovTeam),
fta = sum(ftaTeam),
n = n()) %>%
mutate(possessions = fga+tov-oreb+.475*fta)
opponentStats = games %>%
filter(slugOpponent == team, idGame %in% teamGames$idGame) %>%
summarise(oppReb = sum(trebTeam),
oppPts = sum(ptsTeam),
oppOReb = sum(orebTeam),
oppFGA = sum(fgaTeam),
oppFGM = sum(fgmTeam),
opp3A = sum(fg3aTeam),
opp3M = sum(fg3mTeam),
oppTov = sum(tovTeam),
oppFta = sum(ftaTeam),
oppAst = sum(astTeam),
firstGame = min(dateGame),
lastGame = max(dateGame),
oppN = n()) %>%
mutate(oPossessions = oppFGA+oppTov-oppOReb+.475*oppFta)
results = teamStats %>%
cbind(opponentStats) %>%
mutate(team = team,
gameNum = game,
pace = (possessions+oPossessions)/(n+oppN),
oEff = pts*100/possessions,
dEff = oppPts*100/possessions,
net = oEff - dEff,
efg = (fgm + .5*fg3m)/fga,
rebs = reb/(reb+oppReb),
drebs = (reb-oreb)/(reb-oreb+oppOReb),
orebs = oreb/(oreb+oppReb-oppOReb),
oppFtr = oppFta/oppFGA,
oppEFG = (oppFGM + .5*opp3M)/oppFGA,
opp3r = opp3A/oppFGA,
tov = tov/possessions,
oppAsts = oppAst/oppFGM,
oppTov = oppTov/oPossessions) %>%
select(team, gameNum, firstGame, lastGame, pace, oEff, dEff, net, efg, rebs, drebs, orebs, tov, oppFtr, oppEFG, opp3r, oppAsts, oppTov)
return(results)
}
team2018 = game_logs(seasons=2018, result_types = 'team') %>%
select(dateGame, idGame, numberGameTeamSeason, slugTeam, slugOpponent, isB2B, locationGame, countDaysRestTeam, outcomeGame) %>%
rename(teamGameNum = numberGameTeamSeason, team = slugTeam, opponent = slugOpponent, b2b = isB2B, location = locationGame, outcome = outcomeGame) %>%
mutate(daysRest = ifelse(countDaysRestTeam > 4, 4, countDaysRestTeam)) %>%
select(-countDaysRestTeam)
eligibleTeams = team2018 %>%
filter(teamGameNum > 5)
oppL10 = data.frame()
games2018 = game_logs(seasons=2018, result_types='team')
for(i in 1:nrow(eligibleTeams)){
df = last_ten_games(games2018, eligibleTeams$opponent[i], eligibleTeams$teamGameNum[i]) %>%
rename(opp = team)
oppL10 = oppL10 %>%
rbind(df)
}
upcoming = eligibleTeams %>%
cbind(oppL10) %>%
select(-opp, -gameNum, -efg, -net)
players = game_logs(seasons=2018) %>%
mutate(overTen = sum(c(pts >= 10, ast >= 10, treb >= 10, stl >= 10, blk >= 10))) %>%
mutate(dbl = ifelse(overTen == 2, 1, 0),
trpl = ifelse(overTen >= 3, 1, 0)) %>%
mutate(dkPoints = fg3m*.5+treb*1.25+ast*1.5+stl*2+blk*2-tov*.5+pts+dbl*1.5+trpl*3) %>%
select(idGame, nameTeam, slugTeam, idPlayer, namePlayer, dkPoints, minutes) %>%
rename(team = slugTeam) %>%
inner_join(upcoming, by = c('idGame', 'team'))
playerAvg = players %>%
group_by(namePlayer) %>%
summarise(fpg = mean(dkPoints),
mpg = mean(minutes),
games = n()) %>%
filter(games >= 25, mpg >= 20)
playerComp = players %>%
inner_join(playerAvg, by = c('namePlayer')) %>%
mutate(change = fpg - dkPoints,
home = ifelse(location == 'H', T, F))
lm2 = lm(dkPoints ~ fpg+b2b+home+pace+oEff+dEff+rebs+orebs+oppFtr+oppEFG+opp3r+oppAsts+oppTov, data=playerComp)
summary(lm2)
playerCompN = playerComp %>%
cbind((playerComp %>%
select(pace, rebs, dEff, oppEFG, opp3r, oppTov, oEff, oppAsts, orebs) %>%
scale()) %>%
as.data.frame() %>%
rename(paceN= pace, rebsN = rebs, dEffN = dEff, oppEFGN = oppEFG, opp3rN = opp3r, oppTovN = oppTov, oEffN = oEff, oppAstN = oppAsts, orebsN = orebs))
games2019 = game_logs(result_types = 'team')
eligible2019 = games2019 %>%
filter(numberGameTeamSeason >= 5) %>%
rename(teamGameNum = numberGameTeamSeason, team = slugTeam, opponent = slugOpponent, b2b = isB2B, location = locationGame, outcome = outcomeGame)
last10 = data.frame()
for(i in 1:nrow(eligible2019)){
df = last_ten_games(games2019, eligible2019$opponent[i], eligible2019$teamGameNum[i]) %>%
rename(opp = team)
last10 = last10 %>%
rbind(df)
}
upcoming2019 = eligible2019 %>%
select(dateGame, idGame, teamGameNum, nameTeam, b2b, location, team, opponent) %>%
cbind(last10) %>%
mutate(home = ifelse(location == 'H', T, F)) %>%
select(dateGame, idGame, teamGameNum, team, opponent, firstGame, lastGame,
b2b, home, pace, dEff, rebs, oppTov, oppEFG, opp3r)
currentTeamStatus = function(){
games = game_logs(result_types = 'team')
gameStatus = games %>%
group_by(slugTeam) %>%
summarise(lastGame = max(numberGameTeamSeason)) %>%
mutate(nextGame = lastGame + 1)
currentTeams = data.frame()
for(i in 1:nrow(gameStatus)){
df = last_ten_games(games2019, gameStatus$slugTeam[i], gameStatus$nextGame[i]) %>%
rename(opp = team) %>%
select(-oEff, -net, -efg, -drebs, -orebs, -tov, -oppFtr, -oppAsts)
currentTeams = currentTeams %>%
rbind(df)
}
return(currentTeams)
}
historicalGames = function(games){
g = games %>%
filter(numberGameTeamSeason >= 5)
history = data.frame()
for(i in 1:nrow(g)){
df = last_ten_games(games, g$slugTeam[i], g$numberGameTeamSeason[i]) %>%
rename(opp = team)
history = history %>%
rbind(df)
}
return(history)
}
dkPoints = function(pts, rebs, ast, stl, blk, three, tov){
bonus = sum(c(pts>=10, rebs>=10, ast>=10, stl>=10, blk>=10))
triple = ifelse(bonus>=3, 1, 0)
double = ifelse(bonus == 2, 1, 0)
return(pts+rebs*1.25+ast*1.5+stl*2+blk*2+three*.5+triple*3+double*1.5-.5*tov)
}
playerAveragePrior = function(players, playerName, gameNum){
p = players %>%
filter(namePlayer == playerName & numberGameTeamSeason < gameNum) %>%
mutate(dk = dkPoints(pts, treb, ast, stl, blk, fg3m, tov)) %>%
summarise(fpg = mean(dk))
return(p$fpg[1])
}
playerPastPerformance = function(games, players) {
teamHistory = historicalGames(games)
playerStats = players %>%
mutate(dk = dkPoints(pts, treb, ast, stl, blk, fg3m, tov)) %>%
select(dateGame, idGame, namePlayer, numberGameTeamSeason, slugTeam, slugOpponent, isB2B, locationGame, dk) %>%
mutate(home = ifelse(locationGame == 'H', T, F)) %>%
rename(team = slugTeam, opponent = slugOpponent, gameNum = numberGameTeamSeason, b2b = isB2B) %>%
select(-locationGame)
averages = data.frame()
for(i in 1:nrow(playerStats)){
playerAvg = playerAveragePrior(players, playerStats$namePlayer[i], playerStats$gameNum[i])
averages = averages %>%
rbind(playerAvg)
}
names(averages) = 'avg'
stats = playerStats %>%
cbind(averages) %>%
inner_join(teamHistory, by=c('gameNum', 'opponent' = 'opp'))
return(stats)
}
clusters2018 = upcoming %>%
select(pace, dEff, rebs, oppEFG, opp3r, oppTov)
clusters2019 = upcoming2019 %>%
select(pace, dEff, rebs, oppEFG, opp3r, oppTov)
clusters = clusters2018 %>%
union(clusters2019)
explained = c()
set.seed(13)
for(i in 2:30){
k = kmeans(clusters, i)
e = k$betweenss/k$totss
explained = c(explained, e)
}
plot(explained)
set.seed(13)
clusterAlg = kmeans(clusters,8)
current = currentTeamStatus(games2019)
current = currentTeamStatus()
c = current %>%
select(-opp, -gameNum, -firstGame, -lastGame)
clusterCurrent = cl_predict(clusterAlg, newdata=c) %>%
as.vector()
library(glue)
clusterCurrent = cl_predict(clusterAlg, newdata=c) %>%
as.vector()
library(clue)
clusterCurrent = cl_predict(clusterAlg, newdata=c) %>%
as.vector()
current %>%
cbind(clusterCurrent)
clusterAlg
clusterAlg$means
clusterAlg$centers
cluster_definitions()
load("cluster_algorithm")
getwd()
load("cluster_algorithm")
